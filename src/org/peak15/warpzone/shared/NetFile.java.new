// Used to send a file over the network.
// Loads up the file and stores it in a byte[]
// Best sent over the network compressed

package org.peak15.warpzone.shared;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

public class NetFile {
	
	// Lets the server know what to do with the file.
	public enum FileType {
		OTHER
	}
	
	// Public to increase FieldSerializer performance.
	public FileType type;
	public List<byte[]> tables = new ArrayList<byte[]>();
	public int filesize;
	
	public static final int CHUNK_SIZE = 4096;
	
	public NetFile() {}
	
	public NetFile(File file) throws IOException {
		this(file, FileType.OTHER);
	}

	public NetFile(File file, FileType type) throws IOException {
		this.type = type;
		
		// Read in file.
		InputStream is = new FileInputStream(file);
		
		// Split into CHUNK_SIZE byte chunks.
		int offset = 0;
		filesize = (int) file.length();
		while(offset < filesize) {
			byte[] bt = new byte[CHUNK_SIZE];
			
			is.read(bt);
			
			offset += CHUNK_SIZE;
			tables.add(bt);
		}
		
	    is.close();
	}
	
	public void write(File file) throws IOException {
		OutputStream os = new FileOutputStream(file);
		os.write(this.getBytes());
		os.close();
	}
	
	public FileType getType() {
		return type;
	}
	
	public byte[] getBytes() {
		byte[] file = new byte[(int) filesize];
		int offset = 0;
		for(byte[] bt : tables) {
			if((filesize - offset) < CHUNK_SIZE)
				System.arraycopy(bt, 0, file, offset, filesize - offset);
			else
				System.arraycopy(bt, 0, file, offset, CHUNK_SIZE);
			offset += CHUNK_SIZE;
		}
		
		return file;
	}
}
